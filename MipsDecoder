# Authors Aster Bodden and Stephen Yee 
.data
# Area for global values , constants strings 

prompt_decode: .asciiz "\nInstruction to decode? "
prompt_address: .asciiz "\nInstruction address? "
prompt_format: .asciiz "\nFormat type: "
prompt_destination: .asciiz "\nDestination register: "
prompt_nextPC: .asciiz "\nNext PC: "
rtype: .asciiz " R-type"
itype: .asciiz " I-type"
jtype: .asciiz " J-type"
invalid: .asciiz "invalid"
none: .asciiz "none"
delim: .asciiz " / "
buffer1: .space 9
buffer2: .space 9
.text 

# Area for the code 

#Main program should: 
# Accept a machineinstruction word and its address as two stringsfrom the user
# Extract the numeric value from the input strings
# Call subroutine get_type print the format type (I/J/R) "invalid" if not supported
# Call subroutine get_dest_reg print the destination register number of the instruction (decimal value), "none" for no destination or invalid if not supported
# Call subroutine get_next_pc print(HEX) the address(es)of the next instruction, if not supported print invalid
# Operations supported  add, addi, sub, slt, lw, sw, beq, j. 
main:

	addi $sp, $sp, -8 
	sw $s0, 0($sp) 
	sw $s1, 4($sp)
	 
	li $v0, 4 # print command
	la $a0, prompt_decode # load str into output register
	syscall
	
	la $v0, 8
	la $a0, buffer1
	la $a1, 9
	move $s0, $a0
	syscall
	
	li $v0, 4 # print command
	la $a0, prompt_address # load str into output register
	syscall
	
	la $v0, 8
	la $a0, buffer2
	la $a1, 9
	move $s1, $a0
	syscall
	
	# convert the ascii string to an integer for both instruction and address
	move $a0, $s1
	jal ascii2hex
	move $s1, $v0 # store int address in $s1 
	
	move $a0, $s0
	jal ascii2hex
	move $s0, $v0 # store int instruction in $s0
	
	# print the instruction type 
	li $v0, 4 # print command
	la $a0, prompt_format # load str into output register
	syscall
		
	move $a0, $s0 
	jal get_type  # call subroutine to get type 
	li $t1, 1 # I type 
	li $t2, 2 # R type 
	li $t3, 3 # J type 
	beq $v0, $t1, type_I
	beq $v0, $t2, type_R
	beq $v0, $t3, type_J
	# invalid instruction 
		li $v0, 4 # print command
		la $a0, invalid # load str into output register
		syscall
	j out 
	type_R: 
		li $v0, 4 # print command
		la $a0, rtype # load str into output register
		syscall
		j out 
	type_I: 
		li $v0, 4 # print command
		la $a0, itype # load str into output register
		syscall
		j out 
	type_J: 
		li $v0, 4 # print command
		la $a0, jtype # load str into output register
		syscall
	
	out: # finished printing type 
	
	# print the instruction type 
	li $v0, 4 # print command
	la $a0, prompt_destination # load str into output register
	syscall
		
	move $a0, $s0 
	jal get_dest_reg  # call subroutine to get destination register 
	beq $v0, $zero, inv # handle invalid case 
	li $t0, 32
	beq $t0, $v0 , non # handle none case 
	
	#print register number 
	move $a0, $v0 
	li $v0, 1 # print destination register number 
	syscall
	j out1
	
	non: # print that no register is modified 
		li $v0, 4 # print command
		la $a0, none # load str into output register
		syscall	
		j out1 
		
	inv:
		# invalid instruction or invalid register 
		li $v0, 4 # print command
		la $a0, invalid # load str into output register
		syscall		
	out1:
	
	
	# print the next PC to run 
	li $v0, 4 # print command
	la $a0, prompt_nextPC # load str into output register
	syscall
	
	add $v1, $zero, $zero # set second return to zero to check after call 
	
	move $a0, $s0 # prepare instruction to set as param 1
	move $a1, $s1 # prepare address as param 2 
	jal get_next_pc
	beq $v0, $zero, notvalid 

	# print next PC
	move $a0, $v0 
	li $v0, 34 # print next PC as hex 
	syscall
	
	beq $v1, $zero, out2 # If not a branch instruction job is done 
	
	# print space delimeter 
	li $v0, 4 # print command
	la $a0, delim # load str into output register
	syscall
	
	# print other possible PC if branch is taken 
	move $a0, $v1 
	li $v0, 34 # print next PC as hex 
	syscall
	j out2 
	
	notvalid: 
		# invalid instruction or invalid register 
		li $v0, 4 # print command
		la $a0, invalid # load str into output register
		syscall	
	
	out2: 
		
	lw $s0, 0($sp) 
	lw $s1, 4($sp) 
	addi $sp, $sp,  8 
	j ex1


# required subroutines 
#Parameter:instruction is a 32-bit unsigned number representing a machine instruction word.
# Return: an integer with the following possible values of 1-R type, 2-I type, 3-J type, 0-not supported
.globl get_type
get_type:
	
	# push stacks values to restore  before the call ends
	addi $sp, $sp, -16
	sw $s0, 4($sp) 
	sw $s1, 8($sp) 
	sw $ra, 12($sp)

	# R types will have the opcode set to 0 and func can be 32 34 42 
	# I type ocodes are 8 35 and 43 
	# J type will have opcode 2
	
	#obtain Op code and function code 
	sw $a0, 0($sp) #save instruction parameter 
	jal getOpcode
	add $s0, $v0, $zero # save returned OP code 
	lw $a0, 0($sp) #restore instruction 
	jal getFunc 
	add $s1, $v0, $zero # save returned Function code 
	
	add $v0, $zero, $zero # return register if invalid set to 0
	
	#check the OP code
	addi $t0, $zero, 2 
	beq $s0, $zero, R
	beq $s0, $t0, J
	I:
 		addi $t0, $zero, 4  #beq
 		addi $t1, $zero, 35 #lw
 		addi $t2, $zero, 43 #sw
 		# check that Opcode is valid 
 		beq $s0,$t0, goodI  
 		beq $s0,$t1, goodI 
 		beq $s0,$t2, goodI
 		j exit #not a supported type
 		goodI: 
 			addi $v0, $zero, 1
 			j exit
 	R:  
 		addi $t0, $zero, 32 # add
 		addi $t1, $zero, 34 # sub
 		addi $t2, $zero, 42 # slt 
 		# check that Func is valid 
 		beq $s1,$t0, goodR  
 		beq $s1,$t1, goodR 
 		beq $s1,$t2, goodR
 		j exit #not a supported type
 		goodR: 
 			addi $v0, $zero, 2
 			j exit
	J: 	# set return value to 3
		addi $v0, $zero, 3
	
	exit: 
		# restore Saved registers and retrun address to original value 
		lw $s0 , 4($sp) 
		lw $s1, 8($sp) 
		lw $ra, 12($sp)
		#restore stack to original value 
		addi $sp, $sp, 16
		jr $ra 
	
#Parameter: instruction is a 32-bit unsigned number representing a machine instruction word.
# return: 
	#an integer representing the register number which will be updated by executing of this instruction.
	# A valid return should be within the range of [0,31]'
	# Return 32 if no register gets updated by the instruction
	# Retrun 0 for invalid instruction or invalid destination register
	#Note: some instruction might update $rt instead of $rd
.globl get_dest_reg
get_dest_reg: 
	#make room in stack for ra and other saved variables
	addi $sp, $sp, -8
	sw $ra, 4($sp) # store return address 
	sw $a0, 0($sp) # store paramter 
	# get instruction type 
	jal get_type 
	add $t0, $v0, $zero #save return type 
	beq $t0, $zero, end #if it is an invalid instruction return 0
	
	addi $t1, $zero , 1 
	addi $t3, $zero , 3
	
	beq $t1, $t0, It
	beq $t3, $t0, noUpdate
	# R type 
	Rt:
		lw $a0, 0($sp) # restore instruction
		addi $a1, $zero, 2 # 2ndparam is what register to get (2 = rd)
		jal getRreg # get rd 
		j end 
	
	# I type 
	It:
		lw $a0, 0($sp) #restore instruction before call 
		jal getOpcode #get opcode 
		addi $t0 , $zero, 35
		bne $v0, $t0, noUpdate # this instruction does not update any registers 
		
		lw $a0, 0($sp) #restore instruction before call 
		addi $a1, $zero, 1 # 2ndparam is what register to get (1 = rt)
		jal getRreg #get rt
		j end 
	
	# J type or any instruction that does not modify a register  
	noUpdate: 
		addi $v0 , $zero, 32
	
	end: 
		#restore return address 
		lw $ra, 4($sp) 
		addi $sp , $sp, 8 # restore stack to original size 
		jr $ra
		
#Parameter: instruction is a 32-bit unsigned number representing a machine instruction word.
#	    addr is a 32-bit unsigned number representing the address (PC) of instruction.
# return: 
# For sequential and jump instructions, return an integer representing the address of the next instruction we will fetch and execute in $v0
# For branch return two integers if taken return address in v1, if not taken return address in v0 
#  next pc is never going to be zero and return 0 in $v0 for invalid instructions
.globl get_next_pc
get_next_pc:

	addi $sp, $sp, -12
	sw $ra, 8($sp) 
	sw $a0, 4($sp) 
	sw $a1, 0($sp) 
	
	#check if the instruction is a valid instruction 
	jal get_type #return type in $v0 
	
	#restore parameter values 
	lw $a0, 4($sp) 
	lw $a1, 0($sp) 
	
	beq $zero, $v0, finish # retrun if the instruction is invalid 
	addi $t0, $zero, 3 # 3 = jump instruction 
	beq $t0, $v0, ujump # if type is 3 find jump target 
	
	jal getOpcode # get the instruction opcode 
	
	#restore parameter values 
	lw $a0, 4($sp) 
	lw $a1, 0($sp)
	
	add $t1, $v0, $zero #save instruction opcode in t1 
	addi $v0, $a1, 4 # PC + 4 in return register 
	addi $t0, $zero, 0x4 # beq opcode = 4
	bne $t1, $t0, finish #  if it is not a beq instruction target address is already calculated  
	
	# branch is taken : 
	# for the branch instruction we have to do an extra step by getting the sign extended imidiate value mult by 4 
	# and this result add it to PC + 4 
	andi $t0, $a0 , 0xFFFF # save the lower  16 bits that have the Imidiate value
	#sign extend $t0 
	sll $t0, $t0, 16
	sra $t0, $t0, 16 
	sll $v1 , $t0, 2 # multiply the immidiate by 4 
	# add the IMM * 4 to (PC + 4) 
	# PC + 4 was already calculated and stored in $v0 
	add $v1, $v1, $v0 # IMM*4 + PC + 4 
	
	j finish 
	# Jump instruction we have to mult immidiate  by 4 and mask the last 4 bits of the current PC to new PC
	ujump: 
		andi $t0, $a0 , 0x3FFFFFF # save the lower  26 bits that have the Imidiate value
		andi $t1, $a1, 0xF0000000 # save the last 4 bits from current PC
		sll $v0 , $t0, 2 # multiply the immidiate by 4 
		#merge Immidiate * 4 and the last four bits of current address 
		or $v0, $v0, $t1 # jump stored in $v0  
			
	finish: 
		lw $ra, 8($sp) #restore return address
		addi $sp, $sp, 12
		jr $ra

# Helper subroutines 
getOpcode: 
	srl $v0, $a0, 26
	jr $ra
getFunc: 
	andi $v0, $a0, 0x3F
	jr $ra
# gets the register in instruction $a0 at position $a1
# 0 = rs 
# 1 = rt
# 2 = rd 
getRreg: 
	addi $t0, $zero, 1
	beq $a1, $zero, rs 
	beq $a1, $t0, rt 
	rd: 
		srl $v0, $a0, 11 #shift to rd position 
		j return 		
	rs:
		srl $v0, $a0, 21 #shift to rs position
		j return 
	rt: 
		srl $v0, $a0, 16 #shift to rt position
	
	return: 
		#save only the six bits needed for registers
		andi $v0, $v0, 0x1F
		jr $ra 
# convert the hexadecimal string in $a0 into integer value returned in vo
ascii2hex:
	addi $t1 , $zero, 8 # stop index 
	addi $t2 , $zero, 0 # index 
	add $t5, $zero, $zero  # saves int instruction
	#convert ascii hex to int values 
	loop: 
		# next character 
		 lb $t3, 0($a0) 
		 
		 #convert to int value 0 - 10 
		 addi $t3, $t3, -0x30
		 addi $t4, $zero, 17
		 blt $t3, $t4, mask # if less than 17 it is not a letter 
		 # convert to int value A - F 
		 addi $t3, $t3, -0x7
		 
		 mask: 
		 or $t5, $t5, $t3
		 
		 addi $t2, $t2, 1 #increment counter 
		 beq $t1, $t2, d1 # check if the loop continues 
		 
		 # prepare for net 4 bits 
		 sll $t5, $t5, 4
		 
		addi $a0, $a0, 1 # move address to next byte 
		j loop # check if the loop continues 
	d1: # loop end 
		move $v0, $t5
		jr $ra
# program finished 
ex1:
